id: plasma_range_doppler_sink
label: range_doppler_sink
category: '[plasma]'
flags: [ python ]

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: samp_rate
  label: Sample Rate
  dtype: float
  default: 'samp_rate'
- id: num_pulse_cpi
  label: Pulses per CPI
  dtype: int
  default: 128
- id: center_freq
  label: Center Frequency
  dtype: float
  default: 'center_freq'
- id: gui_hint
  label: GUI Hint
  dtype: gui_hint
  hide: part
# - id: parametername_replace_me
#   label: FIX ME:
#   dtype: string
#   default: You need to fill in your grc/plasma_range_doppler_sink.block.yaml
#- id: ...
#  label: ...
#  dtype: ...

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- domain: message
  id: tx
- domain: message
  id: rx
  # optional: true

# outputs:
#- label: ...
#  domain: ...
#  dtype: ...
#  vlen: ...
#  optional: ...


templates:
  imports: |-
    from PyQt5 import Qt
    from gnuradio import plasma
    import sip
  make: |-
    <%
      win = 'self._%s_win'%id
    %>\
    plasma.range_doppler_sink(${samp_rate}, ${num_pulse_cpi}, ${center_freq})
    ${win} = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)
    ${gui_hint() % win}

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
